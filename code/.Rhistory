seq(-1,1,lenth.out=10)
sequence(-1,1,lenth.out=10)
sequence(-1,1,length.out=10)
seq(-1,1,length.out=10)
seq(-1,1,length.out=1000)
truef = seq(-1,1,length.out=1000)
x.grid = seq(-1,1,length.out=1000)
lines(f(xgrid))
lines(f(x.grid))
# curve(f,-1,1,add=T)
# points(xx[order(xx)],model$yhat.train.mean[order(xx)],col=2,type='l',lwd=2)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
points(xx[order(xx)],model$yhat.train.mean[order(xx)],col=2,type='l',lwd=2)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
?wbart
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=500)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=1000)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
n = 800
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 800
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 800
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=1000)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=100)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
set.seed(301)
f=function(x){
ifelse(x<.2,pnorm(x),-2*x^2+2*x)
}
curve(f,-1,1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=100)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
curve(f,-1,1,add=T,col='purple')
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=200)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
n = 1000
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=200)
plot(xx,yy,pch=19,cex=.8,col='darkgrey',xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.5),xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.1),xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
matplot(x.test,model$yhat.test)
length(x.test)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 4000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=200)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
# matplot(x.test,model$yhat.test)
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
n = 200
xx = runif(n,-1,1)
yy = f(xx) + rnorm(n,0,.04)
points(xx,yy,pch=19,cex=.1)
x.test = seq(-1,1,length.out = 2000)
library(BART)
model = wbart(x.train = xx,y.train = yy,x.test = x.test,ntree=200)
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
# matplot(x.test,model$yhat.test)
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
dim(model$yhat.test)
matplot(x.test,t(model$yhat.test),type='l')
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.3))
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.3),lty=1)
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.2),lty=1)
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.1),lty=1)
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
dev.off()
plot(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.1),lty=1)
curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=2,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=2,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=2,type='l',lwd=1)
lines(x.test,model$yhat.test.mean,col=1,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=1,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=1,type='l',lwd=1)
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.1),lty=1)
points(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.3),xlab="X",ylab='Y')
# curve(f,-1,1,add=T,col='purple',lwd=1.5)
lines(x.test,model$yhat.test.mean,col=1,type='l',lwd=2.5)
lines(x.test,apply(model$yhat.test,2,quantile,.975),col=1,type='l',lwd=1)
lines(x.test,apply(model$yhat.test,2,quantile,.025),col=1,type='l',lwd=1)
matplot(x.test,t(model$yhat.test),type='l',col=rgb(1,0,0,alpha=0.05),lty=1)
points(xx,yy,pch=19,cex=.8,col=rgb(0,0,0,alpha=0.5),xlab="X",ylab='Y')
dev.ofF()
dev.off()
?bcf
library(bcf)
?
bcf
detach("package:base", unload = TRUE)
remove.packages("bcf")
library(bcf)
library(bcf)
?bcf
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("jaredsmurray/bcf")
library(bcf)
?bcf
plot(1:4)
hist(rnorm(10000))
2+2
sqrt(4)
stats_class <- "ML"
unlink("Library/CloudStorage/Dropbox/UATX/classes/Fall2024/QR1/Quantitative-Reasoning-I/topics/DataViz/hallofshame_cache", recursive = TRUE)
2+2
sum(1:10)
student="Tony"
test=1:100
test
rnorm(1000)
rnorm(1000)
rnorm(1000)
rnorm(1000)
rnorm(1000)
rnorm(1000)
rnorm(1000)
rnorm(1000)
hist(rnorm(1000))
hist(rnorm(1000)+10)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink")
## ------------------------------------------------------------------------
5 + 3
5 - 3
5 / 3
5 ^ 3
5 * (10 - 3)
5 * (10 - 3)
sqrt(4)
sqrt(4)
## ------------------------------------------------------------------------
result <- 5 + 3
## ------------------------------------------------------------------------
result = 5 + 3
result
print(result)
result <- 5 - 3
result
david <- "instructor"
david
david <- "instructor and author"
david
typeof(david)
Result <- "5"
Result
as.numeric(Result)
Result
result
class(result)
Result
class(Result)
class(sqrt)
world.pop <- c(2525779, 3026003, 3691173, 4449049, 5320817, 6127700, 6916183)
world.pop
pop.first <- c(2525779, 3026003, 3691173)
pop.second <- c(4449049, 5320817, 6127700, 6916183)
pop.all <- c(pop.first, pop.second)
pop.all
world.pop[2]
c(2, 4)
world.pop[c(2, 4)]
world.pop[c(4, 2)]
world.pop[-3]
world.pop
# We can also convert the vector to different units using mathematical operations
pop.million <- world.pop / 1000
pop.million
round(pop.million,3)
round(pop.million,1)
pop.rate <- world.pop / world.pop[1]
pop.rate
plot(pop.rate)
plot(pop.rate)
2+2
2+2
sum(1:100)
sqrt(1:100)
student = "London"
test = 1:10
test + test
## ------------------------------------------------------------------------
5 + 3
5 - 3
5 / 3
5 ^ 3
5 * (10 - 3)
sqrt(4)
## ------------------------------------------------------------------------
5 + 3
5 - 3
5 / 3
5 ^ 3
5 * (10 - 3)
sqrt(4)
## ------------------------------------------------------------------------
result = 5 + 3
result
print(result)
result <- 5 - 3
result
david <- "instructor"
david
david <- "instructor and author"
david
Result <- "5"
Result
result
# R is case sensitive, and there are many different types of variables
class(result)
Result
class(Result)
class(sqrt)
## ------------------------------------------------------------------------
# Let's look at the world population in thousands from 1950 to 2010 in 10 year intervals
world.pop <- c(2525779, 3026003, 3691173, 4449049, 5320817, 6127700, 6916183)
world.pop
dev.off()
rnorm(1000)
hist(rnorm(1000))
hist(rnorm(10000),breaks=200)
hist(rnorm(100000),breaks=200)
hist(rnorm(1000000),breaks=200)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink")
plot(rnorm(1000),rnorm(1000),pch=9,col="pink")
2+2
1:10
sum(1:10)
(1:10)^5
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
sum(1:10)
student = "Noah"
students = "Noah and Jack"
test = 1:100
test
rnorm(1000)
hist(rnorm(1000))
hist(rnorm(1000))
hist(rnorm(1000),main="")
hist(rnorm(10000),main="",break=200)
hist(rnorm(10000),main="",breaks =200)
hist(rnorm(100000),main="",breaks =200)
hist(rnorm(1000000),main="",breaks =200)
hist(rnorm(1000000),main="Rio",breaks =200)
hist(rnorm(10000000),main="Rio",breaks =200)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink")
plot(rnorm(1000),rnorm(1000),pch=19,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=19,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=1,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=16,col="pink",cex=0.5)
plot(rnorm(1000),rnorm(1000),pch=13,col="pink",cex=0.5)
## ------------------------------------------------------------------------
sum(1:10)
5 + 3
5 - 3
5 / 3
# Admissions summary
library(googlesheets4)
library(dplyr)
library(ggplot2)
library(lubridate)
library(tidyr)
library(patchwork)
# log in to google drive
gs4_auth()
# read in sheet
sheet_url <- "https://docs.google.com/spreadsheets/d/1khVklK9txYfRmkcJHqzUcZmnE3dX4Ex9loF4eSna-uc/edit?gid=1848581530#gid=1848581530"
# Read the first worksheet by default
FA_data <- read_sheet(sheet_url,sheet="Full Admitted")
Merit_data <- read_sheet(sheet_url,sheet="Merit Apps")
All_data <- read_sheet(sheet_url,sheet="All Apps")
setwd("~/Library/CloudStorage/Dropbox/UATX/admissions/code")
write.csv(All_data,"all_data.csv")
All_data$Submitted
All_data$`Created Date`
# Admitted cohort analysis
hist(FA_data$`SAT equivalent`,breaks=20,main="SAT equivalent",xlab="")
summary(FA_data$`SAT equivalent`)
######################
# All app analysis
######################
createdate = substring(All_data$`Created Date`,first=1,last=10)
All_data$date = as.numeric(gsub("-", "", createdate))
All_data$Submitted = as.factor(All_data$Submitted)
write.csv(All_data,"all_data.csv")
View(All_data)
All_data$date
max(All_data$date)
sort(All_data$date)
tail(sort(All_data$date))
colnames(All_data)
All_data$Submitted
setwd("~/Library/CloudStorage/Dropbox/UATX/classes/Fall2025/QR2/Quantitative-Reasoning-II/code")
knitr::opts_chunk$set(echo = TRUE)
cars  = read.csv("../data/cars.csv")
knitr::opts_chunk$set(echo = TRUE, tidy=TRUE)
# this code chunk is used to define the default settings for all code chunks in the document
# load the tidyverse package
# tidyverse is a package of packages that
# are useful for data science
# packages are collections of functions
# that have been written by other people
library(tidyverse)
# read in some company data
# this is some basic financial data
# from companies that have been in the S&P 500
# at some point in time since the year 2000.
companyData <- read.csv("../../dd_specific_files/companyData.csv")
head(companyData)
minwage <- read.csv("~/Library/CloudStorage/Dropbox/UATX/classes/Fall2025/QR2/Quantitative-Reasoning-II/data/minwage.csv")
View(minwage)
knitr::opts_chunk$set(echo = TRUE)
cars  = read.csv("../data/cars.csv")
summary(cars)
plot(cars$Weight,cars$HighwayMPG,pck=19,cex=0.5)
plot(cars$Weight,cars$HighwayMPG,pch=19,cex=0.5)
titanicsurvival <- read.csv("~/Library/CloudStorage/Dropbox/UATX/classes/Fall2025/QR2/Quantitative-Reasoning-II/data/titanicsurvival.csv")
View(titanicsurvival)
View(titanicsurvival)
cars  = read.csv("../data/cars.csv")
cars_QR2  = read.csv("../data/cars.csv")
summary(cars)
plot(cars$Weight,cars$HighwayMPG,pch=19,cex=0.5)
plot(cars$Weight,cars$HighwayMPG,pch=19,cex=0.5)
dev.off()
titanicsurvival <- read.csv("~/Library/CloudStorage/Dropbox/UATX/classes/Fall2025/QR2/Quantitative-Reasoning-II/data/titanicsurvival.csv")
View(titanicsurvival)
cars  = read.csv("../data/cars.csv")
cars  = read.csv("../data/cars.csv")
cars  = read.csv("../data/cars.csv")
summary(cars)
plot(cars$Weight,cars$HighwayMPG,pch=19,cex=0.5)
plot(cars$Weight,cars$HighwayMPG,pch=19,cex=0.5)
plot(cars$Horsepower,cars$CityMPG)
View(cars)
cars$Minivan
mean(cars$Minivan)
cars[300,]
cars[300,10]
mean(titanicsurvival$survived)
mean(titanicsurvival$survived,na.rm=T)
mean(titanicsurvival$survived,na.rm=TRUE)
mean(titanicsurvival$survived,na.rm=TRUE)
titanicsurvival$survived
survived = titanicsurvival$survived=="no"
survived
mean(survived)
died = titanicsurvival$survived=="no"
mean(died)
titanicsurvival$passengerClass
firstclass = titanicsurvival$passengerClass=="1st"
mean(firstclass)
