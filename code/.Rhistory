boot = do(1000)*mean(resample(leaders)$success)
hist(boot$mean)
boot = do(1000)*{
resamdata = resample(leaders)
kill = mean(resamdata$politybefore[resamdata$success == 1])
nokill = mean(resamdata$politybefore[resamdata$success == 0])
diff = kill - nokill
diff
}
hist(boot$result)
mean(leaders$politybefore[leaders$success == 1])
mean(leaders$politybefore[leaders$success == 0])
confint(boot$result)
## avg age for successful/unsuccessful
boot = do(1000)*{
resamdata = resample(leaders)
kill = mean(resamdata$age[resamdata$success == 1])
nokill = mean(resamdata$age[resamdata$success == 0])
diff = kill - nokill
diff
}
hist(boot$result)
confint(boot$result)
# Question 4
## create warbefore variable
leaders$warbefore <- ifelse(leaders$interwarbefore == 1 |
leaders$civilwarbefore == 1, 1, 0)
## proportion war before successful/unsuccessful
mean(leaders$warbefore[leaders$success == 1])
mean(leaders$warbefore[leaders$success == 0])
## compare polity scores before to scores after
mean(leaders$polityafter[leaders$success == 1]) - mean(leaders$polityafter[leaders$success == 0])
boot = do(1000)*{
resamdata = resample(leaders)
kill = mean(resamdata$polityafter[resamdata$success == 1])
nokill = mean(resamdata$polityafter[resamdata$success == 0])
diff = kill - nokill
diff
}
hist(boot$result)
confint(boot$result)
fitlogit = glm(success ~ politybefore + warbefore + age,family="binomial",data=leaders)
summary(fitlogit)
summary(fitlogit)
exp(0.02474)
exp(0.02474) # increase in odds of successful assasination
# what about a reverse regression?
fitlogit = glm(warafter ~ success + politybefore + warbefore + age,family="binomial",data=leaders)
View(leaders)
# Question 4
## create warafter variable
leaders$warbefore <- ifelse(leaders$interwarbefore == 1 |
leaders$civilwarbefore == 1, 1, 0)
leaders$warafter <- ifelse(leaders$interwarafter == 1 |
leaders$civilwarafter == 1, 1, 0)
mean(leaders$warafter)
mean(leaders$warbefore)
fitlogit = glm(warafter ~ success + politybefore + warbefore + age,family="binomial",data=leaders)
summary(fitlogit)
fitlogit = lm(polityafter ~ success + politybefore + warbefore + age,family="binomial",data=leaders)
fitlogit = lm(polityafter ~ success + politybefore + warbefore + age,data=leaders)
fit = lm(polityafter ~ success + politybefore + warbefore + age,data=leaders)
summary(fit)
# Does promiscuity impact lifespan?
library(faraway)
# Does promiscuity impact lifespan?
library(faraway)
library(ggplot2)
data("fruitfly")
?fruitfly
View(fruitfly)
# Boxplot of lifespan by condition
ggplot(fruitfly, aes(x = activity, y = longevity)) +
geom_boxplot() +
labs(title = "Lifespan of Fruit Flies by Activity",
x = "Activity",
y = "Lifespan (days)")
# Model
FF.lm =lm(longevity~activity,data=fruitfly)
r2 = summary(FF.lm)$r.squared; r2
summary(FF.lm)
# Compare to shuffled longevity
fruitfly$shuffled.longevity = sample(fruitfly$longevity)
FFrand.lm =lm(shuffled.longevity~activity,data=fruitfly)
r2.rand = summary(FFrand.lm)$r.squared; r2.rand
# Permutation test
nsim = 1000
r2.rand = numeric(nsims)
nsims = 1000
r2.rand = numeric(nsims)
for (ii in 1:nsims){
fruitfly$shuffled.longevity = sample(fruitfly$longevity)
FFrand.lm =lm(shuffled.longevity~activity,data=fruitfly)
r2.rand[ii] = summary(FFrand.lm)$r.squared
}
hist(r2.rand,xlim = c(0,.4))
abline(v = r2,col=2,lwd=2)
mean(r2<=r2.rand)
dev.off()
leaders <- read.csv("../Quantitative-Reasoning-II/data/leaders.csv",stringsAsFactors = T)
View(leaders)
## Question 1
nrow(leaders) ## number of countries in the data
length(unique(leaders$country)) ## average number of assassination attempts among these countries for
unique(leaders$country)
table(leaders$year)
mean(table(leaders$year)) # alternative
plot(table(leaders$year),type="l")
## Question 2
lev <- levels(leaders$result)
lev # shows response categories
leaders$success <-
ifelse(leaders$result == lev[1] | leaders$result == lev[2] |
leaders$result == lev[3] | leaders$result == lev[4], 1, 0)
View(leaders)
## rate of success
mean(leaders$success)
boot = do(1000)*mean(resample(leaders)$success)
hist(boot$mean)
confint(boot$mean)
boot = do(1000)*{
resamdata = resample(leaders)
kill = mean(resamdata$politybefore[resamdata$success == 1])
nokill = mean(resamdata$politybefore[resamdata$success == 0])
diff = kill - nokill
diff
}
hist(boot$result)
confint(boot$result)
## avg age for successful/unsuccessful
boot = do(1000)*{
resamdata = resample(leaders)
kill = mean(resamdata$age[resamdata$success == 1])
nokill = mean(resamdata$age[resamdata$success == 0])
diff = kill - nokill
diff
}
hist(boot$result)
confint(boot$result)
# Question 4
## create warafter variable
leaders$warbefore <- ifelse(leaders$interwarbefore == 1 |
leaders$civilwarbefore == 1, 1, 0)
leaders$warafter <- ifelse(leaders$interwarafter == 1 |
leaders$civilwarafter == 1, 1, 0)
boot = do(1000)*{
resamdata = resample(leaders)
kill = mean(resamdata$polityafter[resamdata$success == 1])
nokill = mean(resamdata$polityafter[resamdata$success == 0])
diff = kill - nokill
diff
}
hist(boot$result)
confint(boot$result)
fitlogit = glm(success ~ politybefore + warbefore + age,family="binomial",data=leaders)
summary(fitlogit)
confint(fitlogit)
confint(fitlogit,level = 0.9)
exp(0.02474)
fitlogit = glm(warafter ~ success + politybefore + warbefore + age,family="binomial",data=leaders)
summary(fitlogit)
fit = lm(polityafter ~ success + politybefore + warbefore + age,data=leaders)
summary(fit)
data = read.csv("~/Dropbox/UATX/classes/Winter2025/QR2/Quantitative-Reasoning-II/data/medical-school-data/UT San Antonio (Long)/2021.csv")
View(data)
unique(data$status)
data$admit <-
ifelse(data$status == "OA" | data$status == "OW", 1, 0)
data$admit
mean(data$admit)
sum(data$admit)
sum(data$admit) / nrow(data)
unique(data$status)
data$admit <-
ifelse(data$status == "OA" | data$status == "OW" | data$status == "AD", 1, 0)
sum(data$admit) / nrow(data)
unique(data$status)
data$admit <-
ifelse(data$status == "OA" | data$status == "OW" | data$status == "AD", 1, 0)
sum(data$admit) / nrow(data)
data$admit <-
ifelse(data$status == "OA" | data$status == "OW" | data$status == "DF", 1, 0)
sum(data$admit) / nrow(data)
unique(data$Ethnicity)
table(data$status)
unique(data$Ethnicity)
unique(data$gender)
View(data)
View(data)
table(data$admit)
table(data$status)
data$admit <-
ifelse(data$status == "OA" | data$status == "OW" | data$status == "WA" | data$status == "WM", 1, 0)
sum(data$admit) / nrow(data)
data$admit <-
ifelse(data$status == "OA" | data$status == "OW" | data$status == "WM", 1, 0)
sum(data$admit) / nrow(data)
data$admit <-
ifelse(data$status == "OA" | data$status == "OW" | data$status == "WA" | data$status == "WM", 1, 0)
setwd("~/Library/CloudStorage/Dropbox/UATX/classes/Winter2025/QR2/in-class-answers")
setwd("~/Library/CloudStorage/Dropbox/Jared/BCF-LATE-binary/Code/wellness")
# ## Pull the most recent package, compile it.
# devtools::install_local("../BCFLATE/")
## NOTE: This script must be used with preprocessing.R to pull in the relevant data
library(BCFLATE)
library(devtools)
library(gridExtra)
library(ggplot2)
library(dbarts)
library(rpart)
library(rpart.plot)
source("binary_bcflate_wrapper.R")
analysis_index = ii
source("preprocessing.R")
ii1
ii=1
# ## Pull the most recent package, compile it.
# devtools::install_local("../BCFLATE/")
## NOTE: This script must be used with preprocessing.R to pull in the relevant data
library(BCFLATE)
library(devtools)
library(gridExtra)
library(ggplot2)
library(dbarts)
library(rpart)
library(rpart.plot)
source("binary_bcflate_wrapper.R")
analysis_index = ii
source("preprocessing.R")
# modeling R as a function of X, using probitBART
itreat = which(A_train==1)
R_treated = R_train[itreat]
X_treated = X_cat[itreat,]
A_train-R_train
test=A_train-R_train
summary(test)
X_treated <- as.matrix(X_treated)
storage.mode(X_treated) <- "double"
probitBART = bart(y.train=R_treated,x.train=X_treated)
predicted_latent <- probitBART$yhat.train
predicted_probs <- pnorm(predicted_latent)
predicted_probs <- colMeans(predicted_probs)
hist(predicted_probs)
probitBART = bart(y.train=R_treated,x.train=X_treated,nskip=1000,ndpost=9000)
predicted_latent <- probitBART$yhat.train
predicted_probs <- pnorm(predicted_latent)
predicted_probs <- colMeans(predicted_probs)
hist(predicted_probs)
# tree
xdf = data.frame(X_treated)
y = predicted_probs
tree <- rpart(y ~ ., data=xdf,
control=rpart.control(maxdepth=3, cp=-1))
rpart.plot(tree, cex=0.67,box.palette = "BuRd",pal.thresh = 0,under=T)
# Does promiscuity impact lifespan?
library(faraway)
library(ggplot2)
data("fruitfly")
?fruitfly
View(fruitfly)
# Boxplot of lifespan by condition
ggplot(fruitfly, aes(x = activity, y = longevity)) +
geom_boxplot() +
labs(title = "Lifespan of Fruit Flies by Activity",
x = "Activity",
y = "Lifespan (days)")
?fruitfly
FF.lm =lm(longevity~activity,data=fruitfly)
summary(FF.lm)
i_iso = which(fruitfly$activity=="isolated")
# Difference in means??
i_iso = which(fruitfly$activity=="isolated")
i_high = which(fruitfly$activity=="high")
mean(fruitfly$longevity[i_iso])
mean(fruitfly$longevity[i_iso]) - mean(fruitfly$longevity[i_high])
fly_resample = resample(fruitfly)
# confidence interval??
boot = do(1000)*{
fly_resample = resample(fruitfly)
i_iso = which(fly_resample$activity=="isolated")
i_high = which(fly_resample$activity=="high")
mean(fly_resample$longevity[i_high]) - mean(fly_resample$longevity[i_iso])
}
hist(boot$result)
hist(boot$result,xlim=c(-50,50))
abline(v=0,col="blue")
# confidence interval??
boot = do(10000)*{
fly_resample = resample(fruitfly)
i_iso = which(fly_resample$activity=="isolated")
i_high = which(fly_resample$activity=="high")
mean(fly_resample$longevity[i_high]) - mean(fly_resample$longevity[i_iso])
}
hist(boot$result,xlim=c(-50,50))
abline(v=0,col="blue")
hist(boot$result,,breaks=100,xlim=c(-50,50))
dev.off()
library(faraway)
library(ggplot2)
data("fruitfly")
?fruitfly
unique(fruitfly$activity)
table(fruitfly$activity)
# Boxplot of lifespan by condition
ggplot(fruitfly, aes(x = activity, y = longevity)) +
geom_boxplot() +
labs(title = "Lifespan of Fruit Flies by Activity",
x = "Activity",
y = "Lifespan (days)")
# Model
FF.lm =lm(longevity~activity,data=fruitfly)
summary(FF.lm)
i_iso = which(fruitfly$activity=="isolated")
i_high = which(fruitfly$activity=="high")
mean(fruitfly$longevity[i_high]) - mean(fruitfly$longevity[i_iso])
# confidence interval??
boot = do(10000)*{
fly_resample = resample(fruitfly)
i_iso = which(fly_resample$activity=="isolated")
i_high = which(fly_resample$activity=="high")
mean(fly_resample$longevity[i_high]) - mean(fly_resample$longevity[i_iso])
}
hist(boot$result,breaks=100,xlim=c(-50,50))
abline(v=0,col="blue")
setwd("~/Library/CloudStorage/Dropbox/UATX/classes/Winter2025/QR2/Quantitative-Reasoning-II/code")
#' In this script, we investigate a policing experiment and see how to use the
#' FRT to characterize statistical uncertainty in the DiM estimator of the SATE
# First, load in all of the data
load('../data/Z_police.RData') # treatment assignments
load('../data/network_police.RData') # network
load('../data/outcomes_police.RData') # outcomes of interest
# convert to data frames and reorder rows
network = as.data.frame(network)
network = network[order(as.numeric(rownames(network))),]
outcomes = as.data.frame(outcomes)
outcomes = outcomes[order(as.numeric(rownames(outcomes))),]
Z = as.data.frame(Z)
# Let's plot our data first, what are we looking at?
head(network)
plot(network,xlab='',ylab='',pch=19,cex=0.4,col=rgb(0.5,0.5,0.5,alpha=0.5),xaxt='n',yaxt='n',bty='n')
dev.off()
#' In this script, we investigate a policing experiment and see how to use the
#' FRT to characterize statistical uncertainty in the DiM estimator of the SATE
# First, load in all of the data
load('../data/Z_police.RData') # treatment assignments
load('../data/network_police.RData') # network
load('../data/outcomes_police.RData') # outcomes of interest
# convert to data frames and reorder rows
network = as.data.frame(network)
network = network[order(as.numeric(rownames(network))),]
outcomes = as.data.frame(outcomes)
outcomes = outcomes[order(as.numeric(rownames(outcomes))),]
Z = as.data.frame(Z)
# Let's plot our data first, what are we looking at?
head(network)
plot(network,xlab='',ylab='',pch=19,cex=0.4,col=rgb(0.5,0.5,0.5,alpha=0.5),xaxt='n',yaxt='n',bty='n')
head(outcomes)
Y = (outcomes$hmotos +  outcomes$hcarros)*0.221 +
outcomes$homicidio*0.550 + outcomes$lesiones*0.112 +
outcomes$hpersonas*0.116
# What do our outcomes look like?  Let's create a "crime index"
head(outcomes)
# What do our outcomes look like?  Let's create a "crime index"
head(outcomes,50)
points(network,col=rgb(1,0,0,alpha=0.5),cex=1.75*Y,pch=19)
plot(network,xlab='',ylab='',pch=19,cex=0.4,col=rgb(0.5,0.5,0.5,alpha=0.5),xaxt='n',yaxt='n',bty='n')
# What do our outcomes look like?  Let's create a "crime index"
head(outcomes)
Y = (outcomes$hmotos +  outcomes$hcarros)*0.221 +
outcomes$homicidio*0.550 + outcomes$lesiones*0.112 +
outcomes$hpersonas*0.116
names(Y) = rownames(outcomes)
points(network,col=rgb(1,0,0,alpha=0.5),cex=1.5*Y,pch=19)
# Let's plot the observed treatment
dim(Z)
Zobs = Z[,1]; names(Zobs) = rownames(Z)
Zobs_long = rep(0,nrow(network)) # need to make a long Z
hotspot_indices = match(names(Zobs),rownames(network)) # indices in network dataframe that correspond to hotspot indices
Zobs_long[hotspot_indices] <- Zobs
plot(network,xlab='',ylab='',pch=19,cex=0.4,col=rgb(0.5,0.5,0.5,alpha=0.5),xaxt='n',yaxt='n',bty='n')
points(network[hotspot_indices,],col='blue',pch=19,cex=0.6)
points(network[which(Zobs_long==1),],col='green',pch=8,cex=0.75)
treatmentlong = function(Zalt,network,hotspot_indices){
Zalt
Zalt_long = rep(0,nrow(network))
Zalt_long[hotspot_indices] <- Zalt
return(Zalt_long)
}
# A second function that uses the one above for plotting
plottreatment = function(Zalt,network,hotspot_indices){
Zalt_long = treatmentlong(Zalt,network,hotspot_indices)
plot(network,xlab='',ylab='',pch=19,cex=0.4,col=rgb(0.5,0.5,0.5,alpha=0.5),xaxt='n',yaxt='n',bty='n')
points(network[hotspot_indices,],col='blue',pch=19,cex=0.6)
points(network[which(Zalt_long==1),],col='green',pch=8,cex=0.75)
}
plottreatment(Z[,1],network,hotspot_indices)
plottreatment(Z[,2],network,hotspot_indices)
plottreatment(Z[,3],network,hotspot_indices)
plottreatment(Z[,4],network,hotspot_indices)
plottreatment(Z[,5],network,hotspot_indices)
plottreatment(Z[,10000],network,hotspot_indices)
Yobs = Y[hotspot_indices]
DiM = mean(Yobs[which(Zobs==1)]) - mean(Yobs[which(Zobs==0)])
DiM = mean(Yobs[which(Zobs==1)]) - mean(Yobs[which(Zobs==0)])
DiM_function = function(Zalt,Y){
DiM = mean(Y[which(Zalt==1)]) - mean(Y[which(Zalt==0)])
return(DiM)
}
DiM
DiM_observed = DiM_function(Z[,1],Yobs)
# calculate alternative DiM's in a for loop
DiM_alt = c()
for(i in 1:ncol(Z[,-1])){
DiM_alt = c(DiM_alt,DiM_function(Z[,i+1],Yobs))
}
DiM_alt = apply(Z[,-1],MARGIN=2,DiM_function,Y=Yobs)
hist(DiM_alt)
abline(v=DiM_observed,col='blue',lwd=3)
p = mean(DiM_alt<DiM_observed)
min(p,1-p)
# homicides
Yobs = outcomes$homicidio[hotspot_indices]
DiM_alt = apply(Z[,-1],2,DiM_function,Y=Yobs)
DiM_observed = DiM_function(Z[,1],Yobs)
hist(DiM_alt)
abline(v=DiM_observed,col='blue',lwd=3)
p = mean(DiM_alt<DiM_observed)
min(p,1-p)
# car jackings
Yobs = outcomes$hcarros[hotspot_indices]
DiM_alt = apply(Z[,-1],2,DiM_function,Y=Yobs)
DiM_observed = DiM_function(Z[,1],Yobs)
hist(DiM_alt)
abline(v=DiM_observed,col='blue',lwd=3)
p = mean(DiM_alt<DiM_observed)
min(p,1-p)
## ------------------------------------------------------------------------
minwage <- read.csv("../data/minwage.csv") # load the data
dim(minwage)
summary(minwage)
View(minwage)
minwageNJ <- subset(minwage, subset = (location != "PA"))
minwagePA <- subset(minwage, subset = (location == "PA"))
mean(minwageNJ$wageBefore < 5.05)
mean(minwageNJ$wageAfter < 5.05)
mean(minwagePA$wageBefore < 5.05)
mean(minwagePA$wageAfter < 5.05)
minwageNJ$fullPropAfter <- minwageNJ$fullAfter /
(minwageNJ$fullAfter + minwageNJ$partAfter)
minwagePA$fullPropAfter <- minwagePA$fullAfter /
(minwagePA$fullAfter + minwagePA$partAfter)
mean(minwageNJ$fullPropAfter) - mean(minwagePA$fullPropAfter)
prop.table(table(minwageNJ$chain))
prop.table(table(minwagePA$chain))
minwageNJ.bk <- subset(minwageNJ, subset = (chain == "burgerking"))
minwagePA.bk <- subset(minwagePA, subset = (chain == "burgerking"))
mean(minwageNJ.bk$fullPropAfter) - mean(minwagePA.bk$fullPropAfter)
minwageNJ.bk.subset <-
subset(minwageNJ.bk, subset = ((location != "shoreNJ") &
(location != "centralNJ")))
mean(minwageNJ.bk.subset$fullPropAfter) - mean(minwagePA.bk$fullPropAfter)
minwageNJ$fullPropBefore <- minwageNJ$fullBefore /
(minwageNJ$fullBefore + minwageNJ$partBefore)
NJdiff <- mean(minwageNJ$fullPropAfter) - mean(minwageNJ$fullPropBefore)
NJdiff
minwagePA$fullPropBefore <- minwagePA$fullBefore /
(minwagePA$fullBefore + minwagePA$partBefore)
PAdiff <- mean(minwagePA$fullPropAfter) - mean(minwagePA$fullPropBefore)
NJdiff - PAdiff
# diff in diff example with minimum wage data
minwage <- read.csv("../data/minwage.csv") # load the data
minwageNJ <- subset(minwage, subset = (location != "PA"))
minwagePA <- subset(minwage, subset = (location == "PA"))
# defining outcome of interest
minwageNJ$fullPropAfter <- minwageNJ$fullAfter /
(minwageNJ$fullAfter + minwageNJ$partAfter)
minwagePA$fullPropAfter <- minwagePA$fullAfter /
(minwagePA$fullAfter + minwagePA$partAfter)
minwageNJ$fullPropBefore <- minwageNJ$fullBefore /
(minwageNJ$fullBefore + minwageNJ$partBefore)
minwagePA$fullPropBefore <- minwagePA$fullBefore /
(minwagePA$fullBefore + minwagePA$partBefore)
# diffindiff estimate
NJdiff <- mean(minwageNJ$fullPropAfter) - mean(minwageNJ$fullPropBefore)
PAdiff <- mean(minwagePA$fullPropAfter) - mean(minwagePA$fullPropBefore)
NJdiff - PAdiff
# adding a binary variable to our data set
minwage_big = rbind(minwage,minwage)
minwage_big$time = rep(NA,nrow(minwage_big))
minwage_big$time[1:nrow(minwage)] = "Before"
minwage_big$time[(nrow(minwage)+1):nrow(minwage_big)] = "After"
minwage_big$wageBefore[which(minwage_big$time=="After")] <- NA
minwage_big$fullBefore[which(minwage_big$time=="After")] <- NA
minwage_big$partBefore[which(minwage_big$time=="After")] <- NA
minwage_big$wageAfter[which(minwage_big$time=="Before")] <- NA
minwage_big$fullAfter[which(minwage_big$time=="Before")] <- NA
minwage_big$partAfter[which(minwage_big$time=="Before")] <- NA
head(minwage_big)
tail(minwage_big)
# fit a special linear model
minwage_big$fullPropBefore = minwage_big$fullBefore /
(minwage_big$fullBefore + minwage_big$partBefore)
minwage_big$fullPropAfter = minwage_big$fullAfter /
(minwage_big$fullAfter + minwage_big$partAfter)
fullProp = c(minwage_big$fullPropBefore[!is.na(minwage_big$fullPropBefore)],minwage_big$fullPropAfter[!is.na(minwage_big$fullPropAfter)])
minwage_big$fullProp = fullProp
# fix location variable
minwage_big$location[which(minwage_big$location!="PA")] <- "NJ"
head(minwage_big)
NJdiff - PAdiff
fit = lm(fullProp ~ location + time + location*time, data=minwage_big)
summary(fit)
